
//// -----------------------------------------------------
//// --- AUTOGENERATED BY EDUSPHERE CONNECT AI ASSISTANT ---
//// ---         DBML (Database Markup Language)         ---
//// ---      Visualize at https://dbdiagram.io/d/       ---
//// -----------------------------------------------------

Project EduSphere_Connect {
  database_type: 'Firestore'
  Note: 'Schema for the SSN Student Hub application'
}

//// -------------------------------------------------
////                CORE AUTH & USERS
//// -------------------------------------------------

// The central collection for all users, linking Firebase Auth to Firestore profiles.
Table users {
  uid varchar [pk, unique, not null]
  name varchar
  email varchar [unique, not null]
  role varchar [note: "'student', 'teacher', or 'admin'"]
  initials varchar
  avatarUrl varchar
  fcmToken varchar [note: 'Firebase Cloud Messaging token for push notifications']
  collegeId varchar [not null, note: "The institution-specific ID (Student ID or Staff ID). This is the primary key in the students, teachers, or admins collections."]
  program varchar
  branch varchar
  department varchar
  year int
  section varchar
  settings json
  createdAt timestamp
  updatedAt timestamp
}

// Stores detailed profiles for all students.
Table students {
  id varchar [pk, unique, not null, note: "Student's unique College ID (e.g., ENG24CS0001). This is the primary key."]
  user_uid varchar [unique, not null, note: 'Links to the user record in the `users` collection']
  name varchar [not null]
  email varchar [unique, not null]
  program varchar
  branch varchar
  year int
  semester int
  section varchar
  batch varchar
  status varchar [note: "'Active', 'Inactive', 'Graduated', etc."]
  type varchar [note: "'Day Scholar' or 'Hosteler'"]
  dob varchar
  phone varchar
  address varchar
  avatarUrl varchar
  initials varchar
  emergencyContact json
  hostelId varchar
  roomNumber varchar
  createdAt timestamp
  updatedAt timestamp
}

// Stores detailed profiles for all teachers.
Table teachers {
  id varchar [pk, unique, not null, note: "Teacher's unique Staff ID. Primary Key."]
  user_uid varchar [unique, not null, note: 'Links to the user record in the `users` collection']
  name varchar [not null]
  email varchar [unique, not null]
  staffId varchar [note: "Legacy/duplicate of ID field"]
  department varchar
  position varchar
  designation varchar
  status varchar
  avatarUrl varchar
  initials varchar
  phone varchar
  officeLocation varchar
  qualifications varchar
  specialization varchar
  program varchar
  dob varchar
  joinDate timestamp
  createdAt timestamp
  updatedAt timestamp
}

// Stores detailed profiles for all administrators.
Table admins {
  id varchar [pk, unique, not null, note: "Admin's unique Staff ID. Primary Key."]
  user_uid varchar [unique, not null, note: 'Links to the user record in the `users` collection']
  name varchar [not null]
  email varchar [unique, not null]
  staffId varchar [note: "Legacy/duplicate of ID field"]
  department varchar
  position varchar
  status varchar
  avatarUrl varchar
  initials varchar
  phone varchar
  officeLocation varchar
  qualifications varchar
  specialization varchar
  dob varchar
  joinDate timestamp
  createdAt timestamp
  updatedAt timestamp
}

Ref: users.uid - students.user_uid [one-to-one]
Ref: users.uid - teachers.user_uid [one-to-one]
Ref: users.uid - admins.user_uid [one-to-one]

Ref: students.id - users.collegeId [one-to-one]
Ref: teachers.id - users.collegeId [one-to-one]
Ref: admins.id - users.collegeId [one-to-one]


//// -------------------------------------------------
////               ACADEMICS & CLASSES
//// -------------------------------------------------

// The master catalogue of all courses offered by the institution.
Table CoursesCatalogue as 'courses' {
  id varchar [pk, unique, not null, note: 'Firestore auto-generated document ID']
  courseId varchar [not null, note: 'The human-readable course code, e.g., CS101. Auto-generated.']
  courseName varchar [not null]
  program varchar [not null]
  branch varchar [not null]
  semester int [not null]
  credits int [not null]
  createdAt timestamp
  updatedAt timestamp
}

// Represents a specific instance of a course being taught to a section of students by a teacher.
Table classes {
  id varchar [pk, unique, not null, note: 'Firestore auto-generated document ID']
  program varchar [not null]
  branch varchar [not null]
  year int [not null]
  semester int [not null]
  section varchar [not null]
  courseId varchar [not null, note: 'Refers to the course code in the CoursesCatalogue']
  courseName varchar [not null]
  credits int
  teacherId varchar [note: 'The `uid` of the teacher from the `users` collection.']
  studentUids array [note: 'Array of student `uid`s from the `users` collection.']
  createdAt timestamp
  updatedAt timestamp
}

Note on 'classes' {
  'A "class" is an instance of a course from the catalogue being taught. For example, the course CS101 from the catalogue might be taught to Section A and Section B. This would result in two separate documents in the `classes` collection.'
}

Ref: classes.teacherId > users.uid
Ref: "classes.studentUids" > users.uid [note: "Many-to-Many relationship"]


// Stores individual attendance records for each student in each class session.
Table attendance {
  id varchar [pk, unique, not null, note: 'Composite ID: {classId}_{date}_{period}_{studentId}']
  classId varchar [not null]
  studentId varchar [not null]
  teacherId varchar [not null]
  date timestamp [not null]
  period int [not null]
  status varchar [not null, note: "'Present' or 'Absent'"]
  program varchar
  branch varchar
  year int
  semester int
  courseCode varchar
  createdAt timestamp
  updatedAt timestamp
}

Ref: attendance.classId > classes.id
Ref: attendance.studentId > students.id

// Stores marks for each student for a specific course/class.
Table marks {
  id varchar [pk, unique, not null, note: 'Composite ID: {classId}_{studentId}']
  classId varchar [not null]
  studentId varchar [not null]
  courseCode varchar
  courseName varchar
  semester int
  credits int
  internalsMarks int
  externalsMarks int
  totalMarks int
  grade varchar
  createdAt timestamp
  updatedAt timestamp
}

Ref: marks.classId > classes.id
Ref: marks.studentId > students.id

Table backlogs {
  id varchar [pk, note: 'Composite ID: {studentId}_{courseCode}']
  studentId varchar [not null]
  courseCode varchar [not null]
  courseName varchar
  semesterAttempted int
  status varchar [note: "'Active' or 'Cleared'"]
  gradeAchieved varchar
  createdAt timestamp
  updatedAt timestamp
}

Ref: backlogs.studentId > students.id

// Stores study materials uploaded by teachers for a specific class.
Table materials {
  id varchar [pk, unique, not null]
  classId varchar [not null]
  courseId varchar [not null]
  name varchar
  type varchar [note: "'pdf', 'video', 'image', 'other'"]
  size varchar
  url varchar
  uploadDate timestamp
  createdAt timestamp
  updatedAt timestamp
}

Ref: materials.classId > classes.id

//// -------------------------------------------------
////             EXAMS & HALL TICKETS
//// -------------------------------------------------

Table exams {
  id varchar [pk, unique, not null]
  program varchar
  branch varchar
  year int
  semester int
  courseCode varchar
  courseName varchar
  date varchar
  startTime varchar
  endTime varchar
  status varchar [note: "'Scheduled', 'Published', 'Cancelled'"]
  credits int
}

Table hallTickets {
  id varchar [pk, note: 'Composite ID: {studentId}_{semester}']
  studentId varchar [not null]
  studentName varchar
  studentPhotoUrl varchar
  studentCollegeId varchar
  program varchar
  branch varchar
  year int
  semester int
  examSessionName varchar
  exams json [note: 'Array of HallTicketExam objects']
  instructions text
  controllerSignaturePlaceholder varchar
  generatedDate varchar
}

Ref: hallTickets.studentId > students.id


//// -------------------------------------------------
////                 ADMINISTRATIVE
//// -------------------------------------------------

Table fees {
  id varchar [pk, unique, not null, note: 'Same as the studentId']
  studentId varchar
  studentName varchar
  program varchar
  branch varchar
  totalFees float
  amountPaid float
  balance float
  dueDate timestamp
  paymentHistory json [note: 'Array of payment transaction objects']
  createdAt timestamp
  updatedAt timestamp
}

Ref: fees.id > students.id

Table hostels {
  id varchar [pk, unique, not null]
  name varchar
  type varchar [note: "'Boys' or 'Girls'"]
  status varchar
  warden json [note: 'Object with name, contact, email, office']
  amenities array
  rulesHighlight array
  rooms json [note: 'Array of Room objects, each with roomNumber, capacity, and residents array']
  createdAt timestamp
  updatedAt timestamp
}

Table complaints {
  id varchar [pk, unique, not null]
  hostelId varchar [not null]
  studentId varchar [not null]
  studentName varchar
  roomNumber varchar
  issue text
  date timestamp
  status varchar [note: "'Pending', 'In Progress', 'Resolved'"]
  createdAt timestamp
  updatedAt timestamp
}

Ref: complaints.hostelId > hostels.id
Ref: complaints.studentId > students.id

//// -------------------------------------------------
////            PLACEMENT & CAREER
//// -------------------------------------------------

Table placements {
  id varchar [pk, unique, not null]
  type varchar [note: "'placement' or 'internship'"]
  company varchar
  role varchar
  ctc_stipend varchar
  location varchar
  duration varchar [note: "Only for internships"]
  description text
  skills array
  eligibility text
  status varchar [note: "'Open' or 'Closed'"]
  postedAt timestamp
  updatedAt timestamp
}

Table applications {
  id varchar [pk, note: 'Composite ID: {studentUid}_{opportunityId}']
  studentUid varchar [not null]
  studentId varchar [not null]
  opportunityId varchar [not null]
  opportunityType varchar [note: "'placement' or 'internship'"]
  company varchar
  role varchar
  status varchar
  appliedAt timestamp
  updatedAt timestamp
}

Ref: applications.studentUid > users.uid
Ref: applications.opportunityId > placements.id

//// -------------------------------------------------
////                  SYSTEM & COMMS
//// -------------------------------------------------

Table chats {
  id varchar [pk, unique, not null, note: 'Often the same as classId for class chats']
  name varchar
  description varchar
  participantUids array [not null]
  classId varchar
  createdAt timestamp
}
// Note: `messages` is a sub-collection of `chats`.
Table messages {
  id varchar [pk]
  chatId varchar [pk]
  text text
  senderUid varchar
  senderName varchar
  senderInitials varchar
  senderAvatarUrl varchar
  timestamp timestamp
}

Table notifications {
  id varchar [pk, unique, not null]
  recipientUid varchar [not null]
  title varchar
  message text
  type varchar [note: "'alert', 'task', 'info', 'event'"]
  link varchar
  read boolean
  timestamp timestamp
}

Ref: notifications.recipientUid > users.uid

// Stores recent login events for the admin dashboard feed.
Table loginActivities {
  id varchar [pk, unique, not null]
  userId varchar
  timestamp timestamp
}

Ref: loginActivities.userId > users.uid

// Used to generate sequential, unique IDs for students and staff.
Table counters {
  id varchar [pk, unique, not null, note: "e.g., 'student_ENG24CS', 'staff_TCH24CS'"]
  current int [not null]
}
