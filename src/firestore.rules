
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a teacher
    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    // Helper function to check if a user is a student
    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // A user can read their own user document.
    // Creation is handled by secure server actions and self-registration.
    // Updates are for things like notification preferences.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == request.resource.data.uid; // For self-registration
    }

    // Students collection
    match /students/{studentId} {
        // Admins can read any student.
        // A user can read a student profile if their own user doc links to it.
        // Teachers can read profiles of students in their sections (handled via server action).
        allow read: if isAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentDocId == studentId;
        // Updates are restricted to Admins or secure server actions.
        allow create, update, delete: if isAdmin();
    }
    
    // Staff collections (Teachers, Admins)
    match /teachers/{teacherId} {
        allow read: if request.auth != null; // Any authenticated user can see public teacher profiles
        allow create, update, delete: if isAdmin(); // Only admins can modify staff
    }

    match /admins/{adminId} {
        allow read: if request.auth != null; // Any authenticated user can see public admin profiles
        allow create, update, delete: if isAdmin();
    }
    
    // Classes
    match /classes/{classId} {
      allow read: if request.auth != null; // Any authenticated user can see class lists
      allow create, update, delete: if isAdmin();
    }
    
    // Courses
    match /courses/{courseId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }

    // Attendance
    match /attendance/{attendanceId} {
        // Students can read their own attendance records.
        // Teachers can read attendance for their classes (validated on server).
        // Admins can read all.
        allow read: if isAdmin() || isTeacher() || (isStudent() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentDocId == resource.data.studentId);
        // Only teachers and admins can create/update attendance.
        allow create, update: if isAdmin() || isTeacher();
    }

    // Marks
    match /marks/{markId} {
        allow read: if isAdmin() || isTeacher() || (isStudent() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentDocId == resource.data.studentId);
        allow create, update: if isAdmin() || isTeacher();
    }

    // Fees
    match /fees/{feeId} {
        // Students can read their own fee doc, Admins can read all.
        allow read: if isAdmin() || (isStudent() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentDocId == feeId);
        // Students submit payments via server action. Only admins update records directly.
        allow update: if isAdmin();
    }

    // Notifications
    match /notifications/{notificationId} {
      // Users can only read/update notifications sent to them.
      allow read, update, delete: if request.auth.uid == resource.data.recipientUid;
      // Notifications are created by trusted server actions.
      allow create: if request.auth != null;
    }
    
    // Chat
    match /chats/{chatId} {
      // Must be a participant or an admin to read chat room details.
      allow read, create: if isAdmin() || request.auth.uid in resource.data.participantUids;

      // Messages sub-collection
      match /messages/{messageId} {
        // Must be a participant or admin to read messages.
        allow read: if isAdmin() || get(parent).data.participantUids.hasAny([request.auth.uid]);
        // Must be a participant to write a message.
        allow create: if (get(parent).data.participantUids.hasAny([request.auth.uid])) && (request.resource.data.senderUid == request.auth.uid);
      }
    }
    
    // Other collections, locked down to server-actions (admin) or specific authenticated user actions.
    match /backlogs/{docId} { allow read: if isAdmin() || isTeacher(); }
    match /complaints/{docId} { allow read, create: if request.auth != null; allow update: if isAdmin() || isTeacher(); }
    match /counters/{docId} { allow read, write: if isAdmin(); } // Counters only modifiable by server
    match /exams/{docId} { allow read: if request.auth != null; allow create, update, delete: if isAdmin(); }
    match /hallTickets/{docId} { allow read: if request.auth != null; allow create, update, delete: if isAdmin(); }
    match /hostels/{docId} { allow read: if request.auth != null; allow create, update, delete: if isAdmin(); }
    match /loginActivities/{docId} { allow create: if request.auth != null; allow read: if isAdmin(); }
    match /materials/{docId} { allow read: if request.auth != null; allow create, update, delete: if isTeacher() || isAdmin(); }
    match /placements/{docId} { allow read: if request.auth != null; allow create, update, delete: if isAdmin(); }
    match /applications/{docId} { 
      allow read, create: if request.auth != null && request.resource.data.studentUid == request.auth.uid; 
      allow update: if isAdmin(); 
    }
  }
}
